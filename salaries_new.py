# -*- coding: utf-8 -*-
"""salaries_new.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Dri7_gxpqPFkepZBbEtoJ0wQTbFTT0f-
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import sqlite3
import gdown

from google.colab import drive
drive.mount('/content/drive')

salaries = pd.read_csv('/content/drive/MyDrive/ds_salaries.csv')

"""### A dataset containing relevant information about Data Scientists was used to conduct this analysis. The dataset includes the following variables:
Для проведення цього аналізу використовувався набір даних, що містить відповідну інформацію про Data Scientists. Набір даних включає такі змінні:

##### 1 work_year: Рік виплати заробітної плати.
##### 2 experience_level: Досвід роботи протягом року.
#### EN> Початковий рівень / Junior
#### MI> Середній рівень / Середній
#### SE> Старший рівень / Експерт
#### EX> Виконавчий рівень / Директор
##### 3 employment_type: Вид зайнятості на посаді.
#### PT> Неповний робочий день
#### FT> Повний робочий день
#### CT> Договір
#### FL> Позаштатний
##### 4 job_title: Роль працювала протягом року.
##### 5 salary: Загальна сума виплаченої зарплати.
##### 6 alary_currency: Валюта виплаченої зарплати як код валюти ISO 4217.
##### 7 salaryinusd: Зарплата в USD.
##### 8 employee_residence: Основна країна проживання працівника протягом робочого року як код країни ISO 3166.
##### 9 remote_ratio: Загальний обсяг роботи, виконаної дистанційно.
#### 10 company_location: Країна головного офісу роботодавця або філії за контрактом.
##### 11 company_size: середня кількість людей, які працювали в компанії протягом року.
"""

salaries.sample(1)

"""check for empty values"""

salaries.isna().sum()

"""### table information"""

salaries.info()

"""### Let's analyze column by column 'salary_in_usd'"""

salaries['salary_in_usd'].describe()

"""### table column list"""

salaries.columns

"""### create a new table"""

x_columns = ['experience_level', 'employment_type', 'job_title', 'company_size']
y_column = 'salary_in_usd'
data_columns = [y_column] + x_columns
data_columns

list_df = ['salary_in_usd', 'experience_level', 'employment_type', 'job_title',
        'company_size']

df_salaries = salaries[list_df]

df_salaries.sample()

import seaborn as sns
import matplotlib.pyplot as plt

"""### we build a boxplot of dependencies (x ='experience_level', y = 'salary_in_usd')"""

sns.boxplot(data=salaries, x ='experience_level', y = 'salary_in_usd')

"""### after that we query the data and see EX level what is getting the most, even though there are the fewest of them"""

sql = '''
    SELECT round(avg(salary_in_usd), 2) AS avg_salary, experience_level
FROM df_salaries AS ds
GROUP BY 2
ORDER BY 2 desc
'''

select(sql)

sns.stripplot(x ='experience_level', y = 'salary_in_usd', data=salaries)

sns.boxenplot(x ='experience_level', y = 'salary_in_usd', data=salaries)

ax = sns.countplot(x ='experience_level', data = df_salaries, )
ax.bar_label(ax.containers[0], fontsize=10)

"""# Create a file on Google Drive to store the database
# with the possibility of reuse
"""

con = sqlite3.connect(
    '/content/drive/MyDrive/window_functions.db')

print(df_salaries.to_markdown())

# we add the table to the database
df_salaries.to_sql(
    'df_salaries',
    con,
    index = False,
    if_exists = 'replace'
)

# we set the function for writing requests
def select(sql):
    return pd.read_sql(sql, con)

# let's create a request to check the downloaded
# to the database employees
sql = '''
    SELECT
      CASE WHEN experience_level = 'EN' THEN 'Entry-level'
        WHEN experience_level = 'MI' THEN 'Mid-level'
        WHEN experience_level = 'SE' THEN 'Senior-level'
        ELSE 'Executive-level'
	  END AS exp_level,
	    CASE WHEN employment_type = 'PT' THEN 'Part-time'
        WHEN employment_type = 'FT' THEN 'Full-time'
        WHEN employment_type = 'CT' THEN 'Contract'
        ELSE 'Freelance'
      END AS emp_type, company_size,
	    max(salary_in_usd) as min_salary,
      min(salary_in_usd) as min_salary,
      sum(salary_in_usd) as sum_salary
    FROM df_salaries AS ds
    GROUP BY 1
'''

select(sql)

# total amount of wages in IT
sql = '''
  SELECT sum(salary_in_usd) as total
  FROM df_salaries
'''

select(sql)

# we find the amount each level received
sql = '''
    SELECT CASE WHEN experience_level = 'EN' THEN 'Entry-level'
		WHEN experience_level = 'MI' THEN 'Mid-level'
		WHEN experience_level = 'SE' THEN 'Senior-level'
		ELSE 'Executive-level'
	END AS exp_level,
		 sum(salary_in_usd)
FROM df_salaries AS ds
GROUP BY 1
'''

select(sql)